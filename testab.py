## @file testab.py
#  @title testab
#  @author Jenny Feng Chen
#  @date 04/07/2016

def main():
    #format for input of initial state(example): X, ,O, , , ,O, ,X
    state=input("Enter the state of the board: ")
    player=input("Player(X or O): ")
    TreeBuildAB(state.split(','),player)
    
def TreeBuildAB(S,player):
#takes initial state and player initial
#returns a list of all game states generated by the game tree with root S
     return helper(S,player,True,-1,1)

def helper(S,player,isMax,alpha,beta):
    l=[]
    for n in range(len(S)):
        l.append(S[n])
    #change the oppo value when the turn changes
    if player=='X':
        oppo='O'
    else:
        oppo='X'
    #first checking the base case whether it is a winning state for X
    if checkWinState(S,player)==True:
        if isMax==True:
            l.append(1)
            l.append(player)
            l.append((-1,-1))
            #when go into this if statement, it means turn X and alpha would be 1
            l.append((1,beta))
            #print the state and value
            getString(str(l[:9]),l)
            return l
        else:
             l.append(-1)
             l.append(player)
             l.append((-1,-1))
             l.append((alpha,-1))
             #print the state and value
             getString(str(l[:9]),l)
             return l
    #checking the base case whether it is a winning state for O
    if checkWinState(S,oppo)==True:
        if isMax==True:
            l.append(-1)
            l.append(player)
            l.append((-1,-1))
            #when go into this if statement, it means turn O and alpha would be -1
            l.append((-1,beta))
            getString(str(l[:9]),l)
            return l
        else:
            l.append(1)
            l.append(player)
            l.append((-1,-1))
            l.append((alpha,1))
            getString(str(l[:9]),l)
            return l
    isFull=True
    #check whether there is space in the state
    for i in range(len(S)):
        if S[i]==' ':
            isFull=False
            break
    #if no space then return value 0 which means draw
    if isFull==True:
         l.append(0)
         l.append(player)
         l.append((-1,-1))
         #when state is full, the best result for turn X
         #would be getting a draw value 0 for alpha
         #and the best result for O would be also getting a draw value 0 for beta
         if isMax==True:
             l.append((0,beta))
         else:
             l.append((alpha,0))
         getString(str(l[:9]),l)
         return l
    count=[]
    #find the space in the state and take the index of each of the space into a list
    for i in range(len(S)):
        if S[i]==' ':
            count.append(i)
    value=[]
    #put the player to the space and call the function to determine the value of state
    for i in range(len(count)):
        S[count[i]]=player
        L=helper(S,oppo,not isMax,alpha,beta)
        #taking alpha beta from the list
        a=L[len(L)-1][0]
        b=L[len(L)-1][1]
        #compare the current beta or alpha to the original alpha or beta respectively
        if isMax==True:
            if b>alpha:
                alpha=b
        else:
            if a<beta:
                beta=a
        value.append(L[9])
        S[count[i]]=' '
        #cut off when alpha is greater than beta
        if alpha>=beta:
            break
    #take the maximum value or minimum value for the current player and determine the position
    if isMax==True:
        val=max(value)
        pos=value.index(max(value))
    else:
        val=min(value)
        pos=value.index(min(value))
    #convert to the coordinate system
    move=(count[pos]//3,count[pos]%3)
    l.append(val)
    l.append(player)
    l.append(move)
    l.append((alpha,beta))
    #print the state and value
    getString(str(l[:9]),l)
    return l
    
def checkWinState(state, XorO):
    return ((state[6] == XorO and state[7] == XorO and state[8] == XorO) or # across the top
            (state[3] == XorO and state[4] == XorO and state[5] == XorO) or # across the middle
            (state[0] == XorO and state[1] == XorO and state[2] == XorO) or # across the bottom
            (state[6] == XorO and state[3] == XorO and state[0] == XorO) or # down the left side
            (state[7] == XorO and state[4] == XorO and state[1] == XorO) or # down the middle
            (state[8] == XorO and state[5] == XorO and state[2] == XorO) or # down the right side
            (state[6] == XorO and state[4] == XorO and state[2] == XorO) or # diagonal
            (state[8] == XorO and state[4] == XorO and state[0] == XorO)) # diagonal

#make the printing format as same as the project displayed
def getString(string,l):
    newS='';i=0
    while i < len(string):
        n=string[i]
        if string[i]==',':
            if string[i+1]==" ":
                newS+=string[i]
                i+=1
        elif string[i]!="'":
            newS+=string[i]
        i+=1
    print('State='+newS+', '+'Value='+str(l[9]))
